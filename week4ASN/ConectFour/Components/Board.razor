@using ConnectFour
@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
    @for (var i = 0; i < 42; i++)
    {
        <span class="container">
            <span></span>
        </span>
    }
    </div>
    @for (var i = 0; i < 42; i++)
    {
       <span class="@pieces[i]"></span>
    }
</div>

<div class="scoreboard">
    <h3>Scoreboard</h3>
    <p>Player 1: @player1WinCount</p>
    <p>Player 2: @player2WinCount</p>
    <p>Ties: @tieCount</p>
    <p>Total Games: @((player1WinCount + player2WinCount + tieCount).ToString())</p>
</div>

@code {
    private string[] pieces = new string[42];

    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private int player1WinCount;
    private int player2WinCount;
    private int tieCount;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        bool piecePlayed = false;
        
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
            piecePlayed = true;
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        // Only check for win and update scores if a piece was successfully played
        if (piecePlayed)
        {
            var winState = State.CheckForWin();
            switch (winState)
            {
                case GameState.WinState.Player1_Wins:
                    player1WinCount++;
                    break;
                case GameState.WinState.Player2_Wins:
                    player2WinCount++;
                    break;
                case GameState.WinState.Tie:
                    tieCount++;
                    errorMessage = "It's a tie!";
                    break;
            }

            winnerMessage = winState switch
            {
                GameState.WinState.Player1_Wins => "Player 1 Wins!",
                GameState.WinState.Player2_Wins => "Player 2 Wins!",
                GameState.WinState.Tie => "It's a tie!",
                _ => ""
            };
        }
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
        player1WinCount = 0;
        player2WinCount = 0;
    }
}